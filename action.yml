name: 'Update Release'
inputs:
  github_token:
    description: '"Contents" repository permissions (write)'
    required: true
  owner:
    description: 'Owner of the repository if it is not the current one'
    required: false
  repository:
    description: 'Repository on which to release. Used only if you want to create the release on another repo'
    required: false
  commitish:
    description: 'Any branch or commit SHA the Git tag is created from, unused if the Git tag already exists.'
    required: true
  tag_name:
    description: 'The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag'
    required: true
  prerelease:
    description: '`true` to identify the release as a prerelease. `false` to identify the release as a full release.'
    required: false
runs:
  using: composite
  steps:
    - name: 'Set env'
      run: |
        OWNER="${{ github.repository_owner }}"
        [ -n "${{ inputs.owner }}" ] && OWNER="${{ inputs.owner }}"
        echo "OWNER=$OWNER" >> "$GITHUB_ENV"

        REPOSITORY=$(echo "${{ github.repository }}" | sed -e 's,.*/\(.*\),\1,')
        [ -n "${{ inputs.repository }}" ] && REPOSITORY="${{ inputs.repository }}"
        echo "REPOSITORY=$REPOSITORY" >> "$GITHUB_ENV"

        PRERELEASE=""
        [ -n "${{ inputs.prerelease }}" ] && PRERELEASE="${{ inputs.prerelease }}"
        echo "PRERELEASE=$PRERELEASE" >> "$GITHUB_ENV"
      shell: bash
    - name: 'Get release id'
      id: get-release-id
      run: |
        RESPONSE=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.github_token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ env.OWNER }}/${{ env.REPOSITORY }}/releases \
        )

        RELEASE_INFO=$(echo $RESPONSE | jq '.[] | select(.tag_name=="${{ inputs.tag_name }}")')
        [ -z "$RELEASE_INFO" ] && RELEASE_INFO=$(echo $RESPONSE | jq '.[] | select(.name=="${{ inputs.tag_name }}")')

        RELEASE_ID=$(echo "$RELEASE_INFO" | jq '.id')
        echo "RELEASE_ID=$RELEASE_ID" >> "$GITHUB_ENV"

        if [ -z "${{ env.PRERELEASE }}" ]; then
          PRERELEASE=$(echo "$RELEASE_INFO" | jq '.prerelease')
          echo "PRERELEASE=$PRERELEASE" >> "$GITHUB_ENV"
        fi
      shell: bash
    - name: 'Update release'
      run: |
        if [ -z "${{ env.RELEASE_ID }}" ]; then
          echo "Release for ${{ inputs.tag_name }} is not exist."
          exit 1
        fi

        RESPONSE=$(curl -L \
          -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.github_token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ env.OWNER }}/${{ env.REPOSITORY }}/releases/${{ env.RELEASE_ID }} \
          -d '{"tag_name":"${{ inputs.tag_name }}","target_commitish":"${{ inputs.commitish }}","name":"${{ inputs.tag_name }}","prerelease":${{ env.PRERELEASE }}}' \
        )

        STATUS=$(echo $RESPONSE | jq '.status')
        if [ "$STATUS" != null ]; then
          echo "Failed to update release for ${{ inputs.tag_name }}."
          echo "HTTP status code: $STATUS"
          exit 1
        else
          echo "Succeed to update release for ${{ inputs.tag_name }}."
        fi
      shell: bash
